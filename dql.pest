//
// Created by intellij-pest on 2023-04-29
// dql
// Author: julfikar
//
//
// Created by intellij-pest on 2023-04-27
// grammar
// Author: julfikar
//

program = _{ SOI ~ ";"* ~ (stmt ~ ";"+)* ~ stmt? ~ EOI }
stmt    = _{ expr }

expr = {
    create
  | drop
  | len
  | upsert
  | upsert_where
  | put
  | exi
  | search
  | get
  | select
  | delete
  | delete_where
}

create = { cmd_create ~ name ~ "->" ~ object }
drop   = { cmd_drop ~ name }
len    = { cmd_len ~ name }

upsert       = { cmd_upsert ~ name ~ array }
upsert_where = { cmd_upsert ~ name ~ object ~ cmd_where ~ clause }

put    = { cmd_put ~ name ~ "->" ~ key ~ "->" ~ object }
exi    = { cmd_exists ~ name ~ "->" ~ key }
search = { cmd_search ~ name ~ "->" ~ query ~ sort? ~direction? ~ offset? ~ limit? }

select = { cmd_get ~ name ~ cmd_where ~ clause ~ sort? ~direction? ~ offset? ~ limit? }
get    = { cmd_get ~ name ~ "->" ~ key }

delete       = { cmd_delete ~ name ~ "->" ~ key }
delete_where = { cmd_delete ~ name ~ cmd_where ~ clause }

compare = {
    "$like"
  | "$gte"
  | "$lte"
  | "$inc"
  | "$ninc"
  | "$eq"
  | "$neq"
  | "$gt"
  | "$lt"
}

cmd_create = _{("CREATE" | "create")}
cmd_drop = _{("DROP" | "drop")}
cmd_len = _{("LEN" | "len")}
cmd_upsert = _{("UPSERT" | "upsert")}
cmd_put = _{("PUT" | "put")}
cmd_exists = _{("EXISTS" | "exists")}
cmd_search = _{("SEARCH" | "search")}
cmd_get = _{("GET" | "get")}
cmd_delete = _{("DELETE" | "delete")}
cmd_where = _{("WHERE" | "where")}
cmd_sort = _{("SORT" | "sort")}
cmd_asc = _{("ASC" | "asc")}
cmd_desc = _{("DESC" | "desc")}
cmd_offset = _{("OFFSET" | "offset")}
cmd_limit = _{("LIMIT" | "limit")}

key = @{
    name
}

name = @{
    ('a'..'z')+
}

query = @{
    quots
}

sort = {
    cmd_sort ~ ('a'..'z')+
}

direction = {
	(cmd_asc | cmd_desc)+
}

offset = {
	cmd_offset ~ ('0'..'9')+
}

limit = {
    cmd_limit ~ ('0'..'9')+
}

conjunction = {
    "$and"
  | "$or"
}

clause = _{
    object
  | (conjunction ~ ":" ~ clause_array)*
}

clause_object = {
    "{\"" ~ compare ~ "\":" ~ "{" ~ string ~ ":" ~ (number | boolean | null) ~ "}}"
}

clause_array = {
    "[" ~ clause_object ~ ("," ~ clause_object)* ~ "]"
}

quots = @{ "'" ~ ("''" | (!"'" ~ ANY))* ~ "'" }

// JSON
json = _{ (object | array) }

value = _{ object | array | string | number | boolean | null }

object = {
    "{" ~ "}"
  | "{" ~ pair ~ ("," ~ pair)* ~ "}"
}
pair   = { string ~ ":" ~ value }

array = {
    "[" ~ "]"
  | "[" ~ value ~ ("," ~ value)* ~ "]"
}

string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

boolean = { "true" | "false" }

null = { "null" }

// JSON end

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
